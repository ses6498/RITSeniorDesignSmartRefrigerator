package edu.rit.smartFridge.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

@DatabaseTable(tableName = "shoppingList")
public class ShoppingList implements Serializable
{
	/**
	 * autogenerated serial version UID
	 */
	private static final long serialVersionUID = 7795007221701877658L;

	/**
	 * The integer of the list
	 */
	@DatabaseField(columnName = "listID")
	private long ID;

	/**
	 * items contains lists of items, organized by name. Searching for [name] in
	 * this map returns a list of items by that name.
	 */
	private List<ShoppingListItem> items;

	/**
	 * The name of the shopping list
	 */
	@DatabaseField
	private String name;

	/**
	 * True if the list was created by the item suggester, false otherwise.
	 */
	@DatabaseField(columnName = "autoGeneratedFlag")
	private boolean autoGen;
	
	public ShoppingList(String name, boolean autoGen, long ID)
	{
		this.name = name;
		this.autoGen = autoGen;
		this.ID = ID;
	}

	/**
	 * Shopping List Constructor
	 * 
	 * @param name The name of the list
	 * @param autoGen Whether the {@code ShoppingList} was autogenerated
	 * @param ID The long ID of the {@code ShoppingList}
	 */
	public ShoppingList(String name, boolean autoGen, long ID)
	{
		this.name = name;
		this.autoGen = autoGen;
		this.ID = ID;
	}

	/**
	 * Shopping List constructor
	 * 
	 * @param name
	 *            The name of the {@code ShoppingList}
	 * @param autoGen
	 *            Whether the {@code ShoppingList} was auto generated
	 */
	public ShoppingList(String name, boolean autoGen)
	{
		this.name = name;
		this.autoGen = autoGen;
		items = new ArrayList<ShoppingListItem>();
	}

	/**
	 * Shopping List constructor
	 * 
	 * @param name
	 *            The name of the shopping list
	 */
	public ShoppingList(String name)
	{
		this(name, false);
	}

	/**
	 * Empty constructor for ormlite
	 */
	public ShoppingList()
	{
	}

	/**
	 * Gets the ID of the shopping list
	 * 
	 * @return
	 */
	public long getID()
	{
		return ID;
	}

	/**
	 * Adds an item to the grocery list
	 * 
	 * @param item
	 *            The item to add.
	 * @param count How many to add
	 */
	public void addItem(InventoryItem item, int count)
	{
		items.add(new ShoppingListItem(item.getUPC(), item.getName(), count));
	}
	
	/**
	 * Adds a {@code ShoppingListItem} to the grocery list
	 * 
	 * @param item The item to add
	 */
	public void addItem(ShoppingListItem item)
	{
		items.add(item);
	}

	/**
	 * Removes the specified item from the list
	 * 
	 * @param item
	 *            The item to remove
	 * @return True if the item was removed, false otherwise
	 */
	public boolean removeItem(InventoryItem item)
	{
		// passing -1 means we remove all occurances of the item
		return removeItem(item, -1) == 0;
	}

	/**
	 * Removes the specified {@code InventoryItem} from the list
	 * 
	 * @param item
	 *            The {@code InventoryItem} to remove
	 * @param quantity
	 *            How many to remove
	 * @return The number of the specified item remaining in the list.
	 */
	public int removeItem(InventoryItem item, int quantity)
	{
		int remaining = -1;
		for (ShoppingListItem i : items)
		{
			if (i.getUPC() == item.getUPC())
			{
				if (quantity >= i.getQuantity() || quantity == -1)
				{
					// if the quantity is -1 we remove all items.
					items.remove(i);
					remaining = 0;
				} else
				{
					// if quantity to remove is less than quantity present in
					// list,
					// we replace the ShoppingListItem with one that reflects
					// the
					// new quantity.
					remaining = quantity - i.getQuantity();
					i = new ShoppingListItem(i.getUPC(), i.getName(), remaining);
				}
			}

		}
		return remaining;
	}

	/**
	 * Gets all items contained in the list
	 * 
	 * @return The list of items
	 */
	public List<ShoppingListItem> getAllItems()
	{
		return items;
	}

	/**
	 * Gets the name of the grocery list.
	 * 
	 * @return The name of the list.
	 */
	public String getName()
	{
		return name;
	}

	/**
	 * Gives the grocery list a new name
	 * 
	 * @param newName
	 *            The new name of the list.
	 */
	public void setName(String newName)
	{
		name = newName;
	}

	/**
	 * Returns a boolean representation of whether the list was aut-generated.
	 * 
	 * @return True if the list was auto-generated, false otherwise.
	 */
	public boolean isAutoGen()
	{
		return autoGen;
	}
}
