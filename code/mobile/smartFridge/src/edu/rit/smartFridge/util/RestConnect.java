package edu.rit.smartFridge.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import edu.rit.smartFridge.model.InventoryItem;
import edu.rit.smartFridge.model.ShoppingList;
import edu.rit.smartFridge.model.ShoppingListItem;

/**
 * @author ben
 *
 */
public class RestConnect implements DataConnect
{
	private List<ShoppingList> shoppingLists = null;
	private List<InventoryItem> inventory = null;

	/**
	 * Autogenerated Serial Version UID
	 */
	private static final long serialVersionUID = 7863854967488611507L;

	/**
	 * RestConnect Constructor.
	 */
	public RestConnect()
	{
		shoppingLists = new ArrayList<ShoppingList>();
		inventory = new ArrayList<InventoryItem>();
	}
	
	/* (non-Javadoc)
	 * @see edu.rit.smartFridge.util.DataConnect#getLists()
	 */
	public List<ShoppingList> getLists()
	{
		if (shoppingLists == null)
		{
			shoppingLists = new ArrayList<ShoppingList>();
			try
			{
				HttpClient h = new DefaultHttpClient();
				String result = "";
				HttpPost httppost = new HttpPost("http://smartfridge.student.rit.edu/mobileServer.php");
				ArrayList<NameValuePair> nameValuePairs = new ArrayList <NameValuePair>();
				nameValuePairs.add(new BasicNameValuePair ("action", "getShoppingLists"));
				httppost.setEntity(new UrlEncodedFormEntity (nameValuePairs));
				HttpResponse response = h.execute(httppost);
				HttpEntity entity = response.getEntity();
				InputStream is = entity.getContent();

				BufferedReader reader = new BufferedReader (new InputStreamReader (is, "iso-8859-1"), 8);
				StringBuilder sb = new StringBuilder();
				String line = null;

				while ((line = reader.readLine()) != null) {
					sb.append(line + "\n");
				}
				is.close();
				result = sb.toString();

				long listID; 
				String listName;
				boolean autoGen;

				JSONArray jArray = new JSONArray(result);
				for (int i = 0; i < jArray.length(); i++) {
					JSONObject jsonData = jArray.getJSONObject(i);
					listID = jsonData.getLong("listId");
					listName = jsonData.getString("name");
					autoGen = jsonData.getBoolean("autoGeneratedFlag");

					shoppingLists.add(new ShoppingList(listName, autoGen, listID));
				}
			}
			catch (JSONException j)
			{
				System.err.println("INVALID JSON: " + j.getMessage());
			}
			catch (IllegalStateException i)
			{
				System.err.println("ILLEGAL STATE: " + i.getMessage());
			}
			catch (IOException e)
			{
				System.err.println("IO EXCEPTION: " + e.getMessage());
			}
		}
		
		return shoppingLists;
	}

	/* (non-Javadoc)
	 * @see edu.rit.smartFridge.util.DataConnect#getList(int)
	 */
	public ShoppingList getList(long listId)
	{
		List<ShoppingList> list = this.getLists();
		for (ShoppingList l : list)
		{
			if (l.getID() == listId)
			{
				return l;
			}
		}
		return null;
	}

	/* (non-Javadoc)
	 * @see edu.rit.smartFridge.util.DataConnect#populateItems(edu.rit.smartFridge.model.ShoppingList)
	 */
	public ShoppingList populateItems(ShoppingList list)
	{
		ShoppingList retList = new ShoppingList(list.getName(), list.isAutoGen(), list.getID());
		try
		{
			HttpClient h = new DefaultHttpClient();

			String result = "";
			String input = String.valueOf(list.getID());

			HttpPost httppost = new HttpPost("http://smartfridge.student.rit.edu/mobileServer.php");
			ArrayList<NameValuePair> nameValuePairs = new ArrayList <NameValuePair>();

			nameValuePairs.add(new BasicNameValuePair ("action", "getShoppingListById"));
			nameValuePairs.add(new BasicNameValuePair ("listId", input));
			httppost.setEntity(new UrlEncodedFormEntity (nameValuePairs));

			HttpResponse response = h.execute(httppost);
			HttpEntity entity = response.getEntity();
			InputStream is = entity.getContent();

			BufferedReader reader = new BufferedReader (new InputStreamReader (is, "iso-8859-1"), 8);
			StringBuilder sb = new StringBuilder();
			String line = null;

			while ((line = reader.readLine()) != null) 
			{
				sb.append(line + "\n");
			}
			is.close();
			result = sb.toString();
			
			String itemName;
			long UPC;
			int quantity;

			JSONArray jArray = new JSONArray(result);
			for (int i = 0; i < jArray.length(); i++) 
			{
				JSONObject jsonData = jArray.getJSONObject(i);
				itemName = jsonData.getString("itemDescription");
				UPC = jsonData.getLong("itemId");
				quantity = jsonData.getInt("quantity");
				retList.addItem(new ShoppingListItem(UPC, itemName, quantity));
			}
		}
		catch (JSONException j)
		{
			System.err.println("INVALID JSON: " + j.getMessage());
		}
		catch (IllegalStateException i)
		{
			System.err.println("ILLEGAL STATE: " + i.getMessage());
		}
		catch (IOException e)
		{
			System.err.println("IO EXCEPTION: " + e.getMessage());
		}
		
		return retList;
	}

	/* (non-Javadoc)
	 * @see edu.rit.smartFridge.util.DataConnect#getInventory()
	 */
	public List<InventoryItem> getInventory()
	{
		try
		{
			HttpClient h = new DefaultHttpClient();

			String result = "";
			HttpPost httppost = new HttpPost("http://smartfridge.student.rit.edu/mobileServer.php");

			ArrayList<NameValuePair> nameValuePairs = new ArrayList <NameValuePair>();
			nameValuePairs.add(new BasicNameValuePair ("action", "getInventory"));
			httppost.setEntity(new UrlEncodedFormEntity (nameValuePairs));

			HttpResponse response = h.execute(httppost);
			HttpEntity entity = response.getEntity();
			InputStream is = entity.getContent();

			BufferedReader reader = new BufferedReader (new InputStreamReader (is, "iso-8859-1"), 8);
			StringBuilder sb = new StringBuilder();
			String line = null;

			while ((line = reader.readLine()) != null) 
			{
				sb.append(line + "\n");
			}
			is.close();
			result = sb.toString();
			
			// temp storage
			String itemName;
			long itemUPC;
			Date expiration;
			Date purchased;
			InventoryItem temp;
			
			DateFormat d = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
			JSONArray jArray = new JSONArray(result);
			for (int i = 0; i < jArray.length(); i++) 
			{
				JSONObject jsonData = jArray.getJSONObject(i);
				
				// get data from json stream
				itemUPC = jsonData.getLong("upc");
				itemName = jsonData.getString("description");
				expiration = d.parse(jsonData.getString("expirationDate"));
				purchased = d.parse(jsonData.getString("purchaseDate"));
				
				temp = new InventoryItem(itemName, itemUPC, expiration, purchased);
				
				inventory.add(temp);
			}
		}
		catch (JSONException j)
		{
			System.err.println("INVALID JSON: " + j.getMessage());
		}
		catch (IllegalStateException i)
		{
			System.err.println("ILLEGAL STATE: " + i.getMessage());
		}
		catch (IOException e)
		{
			System.err.println("IO EXCEPTION: " + e.getMessage());
		} 
		catch (ParseException e) {
			System.err.println("INVALID DATE: " + e.getMessage());
		}
		
		return inventory;
	}

	/* (non-Javadoc)
	 * @see edu.rit.smartFridge.util.DataConnect#getItem(long)
	 */
	public List<InventoryItem> getItem(long UPC)
	{
		//TODO: possibly make this use inventory and just manually search for
		// all items with the given UPC.
		List<InventoryItem> retList = new ArrayList<InventoryItem>();
		try
		{
			HttpClient h = new DefaultHttpClient();
			
			String result = "";
			String input = String.valueOf(UPC);
			
			HttpPost httppost = new HttpPost("http://smartfridge.student.rit.edu/mobileServer.php");
			ArrayList<NameValuePair> nameValuePairs = new ArrayList <NameValuePair>();
			
			nameValuePairs.add(new BasicNameValuePair ("action", "getInventoryItemByUpc"));
			nameValuePairs.add(new BasicNameValuePair ("upc", input));
			httppost.setEntity(new UrlEncodedFormEntity (nameValuePairs));
			
			HttpResponse response = h.execute(httppost);
			HttpEntity entity = response.getEntity();
			InputStream is = entity.getContent();

			BufferedReader reader = new BufferedReader (new InputStreamReader (is, "iso-8859-1"), 8);
			StringBuilder sb = new StringBuilder();
			String line = null;

			while ((line = reader.readLine()) != null) 
			{
				sb.append(line + "\n");
			}
			is.close();
			result = sb.toString();

			String itemName;
			long itemUPC;
			Date expiration;
			Date purchased;
			
			DateFormat d = DateFormat.getDateInstance();
			JSONArray jArray = new JSONArray(result);
			for (int i = 0; i < jArray.length(); i++) 
			{
				JSONObject jsonData = jArray.getJSONObject(i);
				
				itemUPC = jsonData.getLong("upc");
				itemName = jsonData.getString("description");
				expiration = d.parse(jsonData.getString("expirationDate"));
				purchased = d.parse(jsonData.getString("purchaseDate"));
				
				retList.add(new InventoryItem(itemName, itemUPC, expiration, purchased));
			}
		}
		catch (JSONException j)
		{
			System.err.println("INVALID JSON: " + j.getMessage());
		}
		catch (IllegalStateException i)
		{
			System.err.println("ILLEGAL STATE: " + i.getMessage());
		}
		catch (IOException e)
		{
			System.err.println("IO EXCEPTION: " + e.getMessage());
		} 
		catch (ParseException e) 
		{
			System.err.println("INVALID DATE: " + e.getMessage());
		}
		
		return retList;
	}

	/* (non-Javadoc)
	 * @see edu.rit.smartFridge.util.DataConnect#getItemCount(long)
	 */
	public int getItemCount(long UPC)
	{
		return getItem(UPC).size();
	}

	/* (non-Javadoc)
	 * @see edu.rit.smartFridge.util.DataConnect#getExpirationDates(long)
	 */
	public List<Date> getExpirationDates(long UPC)
	{
		List<InventoryItem> list = this.getItem(UPC);
		List<Date> retList = new ArrayList<Date>();
		for (InventoryItem i : list)
		{
			if (!retList.contains(i.getExpiration()))
			{
				retList.add(i.getExpiration());
			}
		}
		return retList;
	}

	/* (non-Javadoc)
	 * @see edu.rit.smartFridge.util.DataConnect#getPurchaseDates(long)
	 */
	public List<Date> getPurchaseDates(long UPC)
	{
		List<InventoryItem> list = this.getItem(UPC);
		List<Date> retList = new ArrayList<Date>();
		for (InventoryItem i : list)
		{
			if (!retList.contains(i.getPurchased()))
			{
				retList.add(i.getPurchased());
			}
		}
		return retList;
	}

}
